<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://philadelphia.github.io</id>
    <title>Philadelphia</title>
    <updated>2019-08-16T10:00:23.647Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://philadelphia.github.io"/>
    <link rel="self" href="https://philadelphia.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://philadelphia.github.io/images/avatar.png</logo>
    <icon>https://philadelphia.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Philadelphia</rights>
    <entry>
        <title type="html"><![CDATA[Android:View Inflation 分析]]></title>
        <id>https://philadelphia.github.io/post/androidview-inflation-fen-xi</id>
        <link href="https://philadelphia.github.io/post/androidview-inflation-fen-xi">
        </link>
        <updated>2019-08-16T09:41:45.000Z</updated>
        <content type="html"><![CDATA[<p>LayoutInflater 使用说明</p>
<p>LayoutInflater主要是用于加载布局。<br>
加载布局的任务通常都是在Activity中调用setContentView()方法来完成的。其实setContentView()方法的内部也是使用LayoutInflater来加载布局的，只不过这部分源码是internal的，不太容易查看到。</p>
<p>先来看一下LayoutInflater的基本用法吧，它的用法非常简单，首先需要获取到LayoutInflater的实例，有两种方法可以获取到，第一种写法如下：</p>
<pre><code>LayoutInflater layoutInflater = LayoutInflater.from(context);  
</code></pre>
<p>当然，还有另外一种写法也可以完成同样的效果：</p>
<pre><code>LayoutInflater layoutInflater = (LayoutInflater) context  
    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);  
</code></pre>
<p>其实第一种就是第二种的简单写法，只是Android给我们做了一下封装而已。代码如下：</p>
<pre><code> public static LayoutInflater from(Context context) {
    LayoutInflater LayoutInflater =
            (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    if (LayoutInflater == null) {
        throw new AssertionError(&quot;LayoutInflater not found.&quot;);
    }
    return LayoutInflater;
}
</code></pre>
<p>得到了LayoutInflater的实例之后就可以调用它的inflate()方法来加载布局了，如下所示：</p>
<pre><code>layoutInflater.inflate(resourceId, root);  
</code></pre>
<p>inflate()方法一般接收两个参数，第一个参数就是要加载的布局资源文件id，第二个参数是指给该布局的外部再嵌套一层父布局，如果不需要就直接传null。这样就成功成功创建了一个布局的实例，之后再将它添加到指定的位置就可以显示出来了。</p>
<p>其实它是调用一个三个参数的重载方法来实现的。<br>
代码实现：</p>
<pre><code>public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) {
    return inflate(resource, root, root != null);
}
</code></pre>
<p>该三个参数的方法的实现为：</p>
<p>public View inflate(@LayoutRes int resource, @Nullable ViewGroup root) {<br>
return inflate(resource, root, root != null);<br>
}</p>
<p>也就是说不管你是使用的哪个inflate()方法的重载，最终都会辗转调用到LayoutInflater的如下代码中</p>
<p>三个参数的方法的实现为：</p>
<pre><code>public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {
    synchronized (mConstructorArgs) {
        Trace.traceBegin(Trace.TRACE_TAG_VIEW, &quot;inflate&quot;);

        final Context inflaterContext = mContext;
        final AttributeSet attrs = Xml.asAttributeSet(parser);
        Context lastContext = (Context) mConstructorArgs[0];
        mConstructorArgs[0] = inflaterContext;
        View result = root;

        try {
            // Look for the root node.
            int type;
            while ((type = parser.next()) != XmlPullParser.START_TAG &amp;&amp;
                    type != XmlPullParser.END_DOCUMENT) {
                // Empty
            }

            if (type != XmlPullParser.START_TAG) {
                throw new InflateException(parser.getPositionDescription()
                        + &quot;: No start tag found!&quot;);
            }

            final String name = parser.getName();

            if (DEBUG) {
                System.out.println(&quot;**************************&quot;);
                System.out.println(&quot;Creating root view: &quot;
                        + name);
                System.out.println(&quot;**************************&quot;);
            }

		//如果开始IDE标签名是Merge，则会将布局文件中的view依次加入到root视图中。
            if (TAG_MERGE.equals(name)) {
				//如果开始IDE标签名是Merge,如果attachToRoot 为false，会报错
                if (root == null || !attachToRoot) {
                    throw new InflateException(&quot;&lt;merge /&gt; can be used only with a valid &quot;
                            + &quot;ViewGroup root and attachToRoot=true&quot;);
                }

			//遍历parser。将view依次加入到root中、
                rInflate(parser, root, inflaterContext, attrs, false);
            } else {
				//如果开始标签不是merge。则temp就是该布局的根视图。
                // Temp is the root view that was found in the xml
                final View temp = createViewFromTag(root, name, inflaterContext, attrs);

                ViewGroup.LayoutParams params = null;

                if (root != null) {
                    if (DEBUG) {
                        System.out.println(&quot;Creating params from root: &quot; +
                                root);
                    }
                    // Create layout params that match root, if supplied
                    params = root.generateLayoutParams(attrs);
                    if (!attachToRoot) {
                        // Set the layout params for temp if we are not
                        // attaching. (If we are, we use addView, below)
                        temp.setLayoutParams(params);
                    }
                }

                if (DEBUG) {
                    System.out.println(&quot;-----&gt; start inflating children&quot;);
                }

                // Inflate all children under temp against its context.
                rInflateChildren(parser, temp, attrs, true);

                if (DEBUG) {
                    System.out.println(&quot;-----&gt; done inflating children&quot;);
                }

                // We are supposed to attach all the views we found (int temp)
                // to root. Do that now.
                if (root != null &amp;&amp; attachToRoot) {
                    root.addView(temp, params);
                }

                // Decide whether to return the root that was passed in or the
                // top view found in xml.
                if (root == null || !attachToRoot) {
                    result = temp;
                }
            }

        } catch (XmlPullParserException e) {
            final InflateException ie = new InflateException(e.getMessage(), e);
            ie.setStackTrace(EMPTY_STACK_TRACE);
            throw ie;
        } catch (Exception e) {
            final InflateException ie = new InflateException(parser.getPositionDescription()
                    + &quot;: &quot; + e.getMessage(), e);
            ie.setStackTrace(EMPTY_STACK_TRACE);
            throw ie;
        } finally {
            // Don't retain static reference on context.
            mConstructorArgs[0] = lastContext;
            mConstructorArgs[1] = null;

            Trace.traceEnd(Trace.TRACE_TAG_VIEW);
        }

        return result;
    }
}
</code></pre>
<pre><code>
	 第二个参数和第三个参数有四种组合情况
        if(root == null &amp;&amp; ！attachToRoot){
            返回id里的view本身
        }

        if(root != null &amp;&amp; attachToRoot){
            返回root本身，此时root已经将id里的控件添加了。
        此时如果在使用root.addview(view) 就会报错。view此时已经有parent、因为view本身就是root自己。root自己addview自身会报错
        }else if (root != null &amp;&amp; !attachToRoot){
            返回返回id里的view本身，此时id里的控件已经设置了布局参数
        }

	1. 如果root为null，attachToRoot将失去作用，设置任何值都没有意义。
	2. 如果root不为null，attachToRoot设为true，则会给加载的布局文件的指定一个父布局，即root。
	3. 如果root不为null，attachToRoot设为false，则会将布局文件最外层的所有layout属性进行设置，当该view被添加到父view当中时，这些layout属性会自动生效。
	4. 在不设置attachToRoot参数的情况下，如果root不为null，attachToRoot参数默认为true。

</code></pre>
<p>Reference:	<a href="http://blog.csdn.net/guolin_blog/article/details/12921889">http://blog.csdn.net/guolin_blog/article/details/12921889</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Activity: configuration changes]]></title>
        <id>https://philadelphia.github.io/post/activity-configuration-changes</id>
        <link href="https://philadelphia.github.io/post/activity-configuration-changes">
        </link>
        <updated>2019-08-16T09:40:59.000Z</updated>
        <content type="html"><![CDATA[<p>Android 系统规定当系统的Configuration 改变时将会重启Activity。这是一种不太友好的体验，我们可以通过编辑Manifest文件来避免Activity的重启</p>
<blockquote>
<p>要声明由 Activity 处理配置变更，请在清单文件中编辑相应的 <activity> 元素，以包含 android:configChanges 属性以及代表要处理的配置的值。android:configChanges 属性的文档中列出了该属性的可能值（最常用的值包括 &quot;orientation&quot; 和 &quot;keyboardHidden&quot;，分别用于避免因屏幕方向和可用键盘改变而导致重启）。您可以在该属性中声明多个配置值，方法是用管道 | 字符分隔这些配置值。</p>
</blockquote>
<p>例如，以下清单文件代码声明的 Activity 可同时处理屏幕方向变更和键盘可用性变更：</p>
<pre><code>&lt;activity android:name=&quot;.MyActivity&quot;
 android:configChanges=&quot;orientation|keyboardHidden&quot;	
 android:label=&quot;@string/app_name&quot;&gt;
</code></pre>
<p>现在，当其中一个配置发生变化时，MyActivity 不会重启。相反，MyActivity 会收到对 onConfigurationChanged() 的调用。向此方法传递 Configuration 对象指定新设备配置。您可以通过读取 Configuration 中的字段，确定新配置，然后通过更新界面中使用的资源进行适当的更改。调用此方法时，Activity 的 Resources 对象会相应地进行更新，以根据新配置返回资源，这样，您就能够在系统不重启 Activity 的情况下轻松重置 UI 的元素。</p>
<blockquote>
<p>注意：从 <code>Android 3.2（API 级别 13）</code>开始，当设备在纵向和横向之间切换时，“屏幕尺寸”也会发生变化。因此，在开发针对 API 级别 13 或更高版本（正如 minSdkVersion 和 targetSdkVersion 属性中所声明）的应用时，若要避免由于设备方向改变而导致运行时重启，则除了 &quot;orientation&quot; 值以外，您还必须添加 &quot;screenSize&quot; 值。 也就是说，您必须声明 android:configChanges=&quot;orientation|screenSize&quot;。但是，如果您的应用面向 API 级别 12 或更低版本，则 Activity 始终会自行处理此配置变更（即便是在 Android 3.2 或更高版本的设备上运行，此配置变更也不会重启 Activity）。</p>
</blockquote>
<p>例如，以下 onConfigurationChanged() 实现检查当前设备方向：</p>
<pre><code>@Override
public void onConfigurationChanged(Configuration newConfig) {
	  super.onConfigurationChanged(newConfig);

	// Checks the orientation of the screen
	if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
	    Toast.makeText(this, &quot;landscape&quot;, Toast.LENGTH_SHORT).show();
	} else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT){
	    Toast.makeText(this, &quot;portrait&quot;, Toast.LENGTH_SHORT).show();
	}
}
</code></pre>
<p>Configuration 对象代表所有当前配置，而不仅仅是已经变更的配置。大多数时候，您并不在意配置具体发生了哪些变更，而且您可以轻松地重新分配所有资源，为您正在处理的配置提供备用资源。 例如，由于 Resources 对象现已更新，因此您可以通过 setImageResource() 重置任何 ImageView，并且使用适合于新配置的资源（如提供资源中所述）。</p>
<p>请注意，Configuration 字段中的值是与 Configuration 类中的特定常量匹配的整型数。有关要对每个字段使用哪些常量的文档，请参阅 <a href="https://developer.android.com/guide/topics/manifest/activity-element.html#config">Configuration</a> 参考文档中的相应字段。</p>
<p>请谨记：在声明由 Activity 处理配置变更时，您有责任重置要为其提供备用资源的所有元素。 如果您声明由 Activity 处理方向变更，而且有些图像应该在横向和纵向之间切换，则必须在 onConfigurationChanged() 期间将每个资源重新分配给每个元素。</p>
<p>如果无需基于这些配置变更更新应用，则可不用实现 onConfigurationChanged()。在这种情况下，仍将使用在配置变更之前用到的所有资源，只是您无需重启 Activity。 但是，应用应该始终能够在保持之前状态完好的情况下关闭和重启，因此您不得试图通过此方法来逃避在正常 Activity 生命周期期间保持您的应用状态。 这不仅仅是因为还存在其他一些无法禁止重启应用的配置变更，还因为有些事件必须由您处理，例如用户离开应用，而在用户返回应用之前该应用已被销毁。</p>
<p>如需了解有关您可以在 Activity 中处理哪些配置变更的详细信息，请参阅 <code>android:configChanges</code> 文档和 <code>Configuration</code> 类。</p>
<p>如果想要Activity不在系统语言发生改变时重试，需要给Activity设置<code>locale</code>属性<br>
但是这在<code>Android 4.2</code> 之前的版本有效，<code>4.2</code>之后的版本就不行了。因为<code>Android 4.2</code>增加了一个layoutDirection属性，当改变语言设置后，该属性也会成newConfig中的一个mask位。所以ActivityManagerService(实际在ActivityStack)在决定是否重启Activity的时候总是判断为重启。<br>
需要在android:configChanges 中同时添加locale和layoutDirection。</p>
<pre><code>android:configChanges=&quot;locale|layoutDirection&quot;
</code></pre>
<p>所以一下设置应该会满足大部分情况下的Activity重启问题</p>
<pre><code>`android:configChanges=&quot;orientation|screenSize|locale|layoutDirection&quot;`
</code></pre>
<blockquote>
<p><code>orientation|screenSize</code>---方向改变</p>
<p><code>locale|layoutDirection</code>---系统语言改变</p>
</blockquote>
<p>在AndroidManifest.xml中通过配置android:configuration的方法来防止Activity被销毁并重建为什么不被推荐,具体原因参见：</p>
<p><a href="http://blog.csdn.net/aliaooooo/article/details/23606179?spm=5176.100239.blogcont32546.102.ySmWMr&amp;utm_source=tuicool">http://blog.csdn.net/aliaooooo/article/details/23606179?spm=5176.100239.blogcont32546.102.ySmWMr&amp;utm_source=tuicool</a></p>
<p>参考</p>
<ol>
<li>
<p>Android Configuration changes:<a href="https://developer.android.com/guide/topics/resources/runtime-changes.html" title="Android Configuration changes">https://developer.android.com/guide/topics/resources/runtime-changes.html</a></p>
</li>
<li>
<p><a href="http://blog.csdn.net/aliaooooo/article/details/23606179?spm=5176.100239.blogcont32546.102.ySmWMr&amp;utm_source=tuicool"> http://blog.csdn.net/aliaooooo/article/details/23606179?spm=5176.100239.blogcont32546.102.ySmWMr&amp;utm_source=tuicool </a></p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Handler 引起的内存泄露分析以及解决方法]]></title>
        <id>https://philadelphia.github.io/post/handler-yin-qi-de-nei-cun-xie-lu-fen-xi-yi-ji-jie-jue-fang-fa</id>
        <link href="https://philadelphia.github.io/post/handler-yin-qi-de-nei-cun-xie-lu-fen-xi-yi-ji-jie-jue-fang-fa">
        </link>
        <updated>2019-08-16T09:36:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="handler-引起的内存泄露分析以及解决方法">Handler 引起的内存泄露分析以及解决方法</h1>
<p>Handler是Android系统提供的一种在子线程更新UI的机制，但是使用不当会导致memory leak。严重的话可能导致OOM</p>
<p>Java语言的垃圾回收机制采用了可达性分析来判断一个对象是否还有存在的必要性，如无必要就回收该对象引用的内存区域，</p>
<pre><code class="language-java">Handler handler ；
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
        }
    };

}


</code></pre>
<p>然后在其他地方来发送一个延迟消息</p>
<pre><code>handler.postDelayed(new Runnable() {
    @Override
    public void run() {
        
    }
}, 500);
</code></pre>
<p>我们一般使用Handler就是扎样，但是这样会当Activity销毁后会导致memory leak.</p>
<p>原因就是activity销毁了，但是以为我们的Handler对象是一个内部类，因为内部类会持有外部类的一个引用。所以当activity销毁了，但是因为Handler还持有改Activity的引用，导致GC启动后，可达性分析发现该Activity对象还有其他引用。所以无法销毁改Activity，</p>
<p>但是handler仅仅是Activity的一个内存对象。及时他引用了Activity,他们之间也只是循环引用而已。而循环引用则不影响GC回收内存。</p>
<p>其实真正的原因是Handler调用postDelayed发送一个延迟消息时：</p>
<pre><code class="language-java">public final boolean postDelayed(Runnable r, long delayMillis)
{
    return sendMessageDelayed(getPostMessage(r), delayMillis);
}
</code></pre>
<p>而sendMessageDelayed的实现是</p>
<pre><code class="language-java">public final boolean sendMessageDelayed(Message msg, long delayMillis)
{
    if (delayMillis &lt; 0) {
        delayMillis = 0;
    }
    return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);
}
</code></pre>
<p>再往下看</p>
<pre><code class="language-java">public boolean sendMessageAtTime(Message msg, long uptimeMillis) {
    MessageQueue queue = mQueue;
    if (queue == null) {
        RuntimeException e = new RuntimeException(
                this + &quot; sendMessageAtTime() called with no mQueue&quot;);
        Log.w(&quot;Looper&quot;, e.getMessage(), e);
        return false;
    }
    return enqueueMessage(queue, msg, uptimeMillis);
}
</code></pre>
<p>最终是将该消息加入到消息队列中。</p>
<pre><code class="language-java">private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {
    msg.target = this;
    if (mAsynchronous) {
        msg.setAsynchronous(true);
    }
    return queue.enqueueMessage(msg, uptimeMillis);
}
</code></pre>
<p>可以看到，在enqueueMessage的实现中。将msg.target = this;</p>
<p>就是讲改Handler对象赋值给了message的target对象。所以message对象就引用了Handler对象''</p>
<p>进而messageQueue对象就引用了Handler对象。此次逐渐明朗。就是messagequeue———message———</p>
<p>Handler——Activity。</p>
<p>所以我们可以在任一环节做文章即可避免Handler持有Activity对象导致的内存泄露问题。</p>
<p>我们可以在Activity销毁时将任务队列清空，或者 在Activity 销毁时将Handler对象销毁。</p>
<p>总之，就是在任一环节将该引用链条切换就好了，这样GC就可以销毁Activity对象了。</p>
<p>此时还是没有触及到问题的核心，就是为什么messageQueue为什么会持有message对象进而持有Handler对象，导致Activity销毁时还有其他引用。为什么Activity销毁时MessageQueue不销毁呢，这才是问题的核心，如果messageQueue销毁了啥问题也没有了。当然我们也可以在Activity销毁时手动销毁messageQueue对象。这样也可以避免内存泄露。</p>
<p>从这我们可以看出messagequeue的生命周期比Activity长了。所以才导致这些问题。</p>
<p>其实熟悉Handler机制的话就会明白背后的原因了</p>
<pre><code class="language-java"> final Looper mLooper;
 final MessageQueue mQueue;

public Handler() {
    this(null, false);
}

public Handler(Callback callback, boolean async) {
        if (FIND_POTENTIAL_LEAKS) {
            final Class&lt;? extends Handler&gt; klass = getClass();
            if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;
                    (klass.getModifiers() &amp; Modifier.STATIC) == 0) {
                Log.w(TAG, &quot;The following Handler class should be static or leaks might occur: &quot; +
                    klass.getCanonicalName());
            }
        }

        mLooper = Looper.myLooper();
        if (mLooper == null) {
            throw new RuntimeException(
                &quot;Can't create handler inside thread &quot; + Thread.currentThread()
                        + &quot; that has not called Looper.prepare()&quot;);
        }
        mQueue = mLooper.mQueue;
        mCallback = callback;
        mAsynchronous = async;
    }
</code></pre>
<p>从构造方法我们可以看出，无参的构造方法最终调用了两参的构造方法。</p>
<pre><code>mLooper = Looper.myLooper();
        if (mLooper == null) {
            throw new RuntimeException(
                &quot;Can't create handler inside thread &quot; + Thread.currentThread()
                        + &quot; that has not called Looper.prepare()&quot;);
        }
        mQueue = mLooper.mQueue;
</code></pre>
<p>这几行代码才是重中之重。</p>
<p>首先调用Looper.myLooper()方法。如果looper为null，说明没有调用looper.prepare()方法。从抛出的运行时异常可以看出来。(ps:所以在子线程使用handler时，第一就是要调用Looper.prepare方法)</p>
<p>looper不为空话话，将looper复制个Handler的looper对象，然后将looper的queue对象赋值给handler的queue对象。</p>
<p>可以说Handler的looper字段和queue字段都是来着looper对象的。</p>
<p>可以看出我们在Handler里发送的消息最终发送到了handler的queue对象所执行的内存区域，而这片内存区域也是Looper对象的queue对象所指向的。所以说该queue对象里所有的message对象都收到Looper对象的queue对象的管理。</p>
<p>真正的大boss来了，都是Looper搞鬼。</p>
<p>因为我们是在主线程中初始化的Handler。所以Handler引用的looper对象是在主线程中创建的。</p>
<p>在代码ActivityThread.main()中：</p>
<pre><code class="language-java">public static void main(String[] args) {
        ....

        //创建Looper和MessageQueue对象，用于处理主线程的消息
        Looper.prepareMainLooper();

        //创建ActivityThread对象
        ActivityThread thread = new ActivityThread(); 

        //建立Binder通道 (创建新线程)
        thread.attach(false);

        Looper.loop(); //消息循环运行
        throw new RuntimeException(&quot;Main thread loop unexpectedly exited&quot;);
    }
</code></pre>
<pre><code> Looper.prepareMainLooper();
 
  public static void prepareMainLooper() {
        prepare(false);
        synchronized (Looper.class) {
            if (sMainLooper != null) {
                throw new IllegalStateException(&quot;The main Looper has already been prepared.&quot;);
            }
            sMainLooper = myLooper();
        }
    }
</code></pre>
<p>在prepareMainLooper方法中首先调用了prepare方法，这就是为什么我们在主线程使用Handler时不需要自己手动调动looper的prepare方法的原因。</p>
<pre><code class="language-java">private static void prepare(boolean quitAllowed) {
    if (sThreadLocal.get() != null) {
        throw new RuntimeException(&quot;Only one Looper may be created per thread&quot;);
    }
    sThreadLocal.set(new Looper(quitAllowed));
}
</code></pre>
<p>在prepare方法中首先从sThreadLocal对象中取出looper对象。如果不为null.说明已经初始化过了，直接抛出异常。</p>
<p>没有初始化的话直接初始化然后放到sThreadLocal中。sThreadLocal是一个ThreadLocal类型。持有线程的私有数据。</p>
<p>此时，真相大白了。主线程的ThreadLocal——&gt;looper——&gt;messagequue——&gt;message——&gt;handler——&gt;Acitivity</p>
<p>因为APP在活动中，所以主线程一直存在。looper一直存在，messageQueue一直存在。所以当我们发送了延迟消息时，而此时Activity销毁的话。自然会引起内存泄露的。</p>
<p>解决方法也很明了了。既然我们不能再looper层面做文章，就只能在handler和message层面做文章了。在Activity销毁时 将Handler手动置为null,或者将messagequeue 清空，或者将Handler设置为静态内部类。然后内部通过若引用持有Activity对象。总之就是要让Handler和message改放手时就放手</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://philadelphia.github.io/post/hello-gridea</id>
        <link href="https://philadelphia.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>